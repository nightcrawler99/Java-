package com.company;

public abstract class Club {
    private String name;

    public Club(String name) {
        this.name = name;
    }

}
---------------------------------------------------------------------------------------------------------------------------------
package com.company;

public class EnglishClub extends Club {
    public EnglishClub(String name) {
        super(name);
    }


}
---------------------------------------------------------------------------------------------------------------------------------
package com.company;

public class SpanishClub extends Club {
    public SpanishClub(String name) {
        super(name);
    }
}
----------------------------------------------------------------------------------------------------------------------------------
package com.company;

import java.util.ArrayList;

public class Teams<T> implements Comparable<Teams<T>>{

    private String name;

    private int won=0;
    private int lost=0;
    private int tied=0;

    ArrayList<T>clubs=new ArrayList<>();


    public Teams(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    public boolean addClub(T club){

        if(clubs.contains(club)){
            return false;
        }else {
            clubs.add(club);
            return true;
        }
    }
    public void matchesPlayed(Teams<T> opponent,int homeScore,int awayScore){


        if(homeScore>awayScore){

            won++;
        }else if(homeScore==awayScore){
            tied++;
        }else {
            lost++;

        }
        if(opponent!=null){
            opponent.matchesPlayed(null,awayScore,homeScore);

        }

    }

    public int points(){
        return (won*3)+tied;
    }



    @Override
    public int compareTo(Teams<T> team) {

        if(this.points()>team.points()){
            return -1;
        }else if(this.points()<team.points()){
            return 1;
        }else {

                return 0;

        }
    }
}
-------------------------------------------------------------------------------------------------------------------------------------
package com.company;

import java.util.AbstractList;
import java.util.ArrayList;

import java.util.Collections;

public class Leagues<T extends Teams>{

    private String name;
    private AbstractList<T>members=new ArrayList<>();


    public Leagues(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    public boolean addTeamToLeague(T team){
        if(members.contains(team)){
            System.out.println(team+" is already in the "+this.name);
            return false;
        }else {
            this.members.add(team);
            return true;
        }
    }

    public void leagueTable(){
        Collections.sort(members);

        for(int i=0;i<members.size();i++){
            System.out.println(members.get(i).getName()+" : "+ members.get(i).points());
        }
    }


}
-----------------------------------------------------------------------------------------------------------------------------------
package com.company;



public class Main {

    public static void main(String[] args) {


        Leagues<Teams<EnglishClub>> epl=new Leagues("Premier League");

        Teams<EnglishClub> arsenal=new Teams("Arsenal");
        Teams<EnglishClub> chelsea=new Teams("Chelsea");
        Teams<EnglishClub> manu=new Teams("Manu");
        Teams<EnglishClub> liverpool=new Teams("Liverpool");



        epl.addTeamToLeague(arsenal);
        epl.addTeamToLeague(chelsea);
        epl.addTeamToLeague(manu);
        epl.addTeamToLeague(liverpool);


        arsenal.matchesPlayed(manu,1,1);
        manu.matchesPlayed(chelsea,1,3);
        liverpool.matchesPlayed(arsenal,1,2);
        chelsea.matchesPlayed(liverpool,4,3);

        chelsea.matchesPlayed(arsenal,1,0);
        liverpool.matchesPlayed(manu,3,2);


        epl.leagueTable();
        System.out.println("********************");

        Leagues<Teams<SpanishClub>>laliga=new Leagues<>("La Liga");

        Teams<SpanishClub> realMadrid=new Teams<>("Real Madrid");
        Teams<SpanishClub> atletcoMadrid=new Teams<>("Atletico Madrid");
        Teams<SpanishClub> barcelona=new Teams<>("Barcelona");
        Teams<SpanishClub> valencia=new Teams<>("Valencia");

        laliga.addTeamToLeague(realMadrid);
        laliga.addTeamToLeague(barcelona);
        laliga.addTeamToLeague(valencia);
        laliga.addTeamToLeague(atletcoMadrid);

        realMadrid.matchesPlayed(atletcoMadrid,1,1);
        barcelona.matchesPlayed(valencia,4,0);
        valencia.matchesPlayed(realMadrid,1,1);
        atletcoMadrid.matchesPlayed(barcelona,2,2);

        laliga.leagueTable();





    }
}
-----------------------------------------------------------------------------------------------------------------------------------
output
Chelsea : 9
Arsenal : 4
Liverpool : 3
Manu : 1
********************
Barcelona : 4
Real Madrid : 2
Atletico Madrid : 2
Valencia : 1
